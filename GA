# R EDA for GStore + GLM + KERAS + XGB
# https://www.kaggle.com/kailex/r-eda-for-gstore-glm-keras-xgb


# Preparations
## Load libraries
library(h2o)
library(caret)
library(lme4)
library(ggalluvial)
library(xgboost)
library(jsonlite)
library(lubridate)
library(knitr)
library(Rmisc)
library(scales)
library(countrycode)
library(highcharter)
library(glmnet)
library(keras)
library(forecast)
library(zoo)
library(magrittr)
library(tidyverse)

## Load data
setwd("C:/Users/SOLCHANMIN/Desktop/Solie/DS/Kaggle/GA Customer Revenue Prediction/ga-customer-revenue-prediction")
set.seed(0)

tr   <- read_csv("train.csv")
te   <- read.csv("test.csv")
subm <- read.csv("sample_submission.csv")


# Peak at the dataset
## General info
glimpse(tr)
glimpse(te)


## Distribution of transaction dates
p1 <- tr %>% 
  mutate(date = ymd(date),
         year_month = make_date(year(date), month(date))) %>%
  group_by(year_month) %>% count() %>%
  ggplot(aes(x = year_month, y = n)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(x = "", y = "transactions", title = "Train") +
  theme_minimal() +
  scale_x_date(labels = date_format("%Y - %m")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  geom_vline(aes(xintercept = max(year_month), colour = "red"), size = 1) +
  theme(legend.position = "none")
p2 <- te %>%
  mutate(date = ymd(date),
         year_month = make_date(year(date), month(date))) %>%
  group_by(year_month) %>% count() %>%
  ggplot(aes(x = year_month, y = n)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(x = "", y = "transactions", title = "Test") +
  theme_minimal() +
  scale_x_date(labels = date_format("%Y - %m")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(p1, p2, cols = 2)

## Dataset columns
tr %>% select(fullVisitorId, channelGrouping, date,
              sessionId, socialEngagementType, visitId,
              visitNumber, visitStartTime) %>%
  map_dfr(n_distinct) %>%
  gather() %>%
  ggplot(aes(reorder(key, -value), value)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  scale_y_log10(breaks = c(5, 50, 250, 500, 1000, 10000, 50000)) +
  geom_text(aes(label = value), vjust = 1.6, colour = "white", size = 3.5) +
  theme_minimal() +
  labs(x = "features", y = "Number of unique values") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


## JSON data
flatten_json <- . %>%
  str_c(., collapse = ",") %>%
  str_c("[", ., "]") %>%
  fromJSON(flatten = T)

parse <- . %>%
  bind_cols(flatten_json(.$device)) %>%
  bind_cols(flatten_json(.$geoNetwork)) %>%
  bind_cols(flatten_json(.$trafficSource)) %>%
  bind_cols(flatten_json(.$totals)) %>%
  select(-device, -geoNetwork, -trafficSource, -totals)

tr <- parse(tr)
te <- parse(te)

## Train and test feaatures sets intersection
setdiff(names(tr), names(te))
tr <- tr %>% select(-one_of("campaignCode"))

## Constant columns
fea_uniq_values <- sapply(tr, n_distinct)
(fea_del <- names(fea_uniq_values[fea_uniq_values == 1]))

tr <- tr %>% select(-one_of(fea_del))
te <- te %>% select(-one_of(fea_del))

## Missing values
is_na_val <- function(x) x %in% c("not available in demo dataset",
                                  "(not provided)",
                                  "(not set)",
                                  "<NA>",
                                  "unknown.unknown",
                                  "(none)")
tr <- tr %>% mutate_all(funs(ifelse(is_na_val(.), NA, .)))
te <- te %>% mutate_all(funs(ifelse(is_na_val(.), NA, .)))

tr %>% summarise_all(funs(sum(is.na(.))/n()*100)) %>%
  gather(key = "feature", value = "missing_pct") %>%
  ggplot(aes(x = reorder(feature, -missing_pct), y = missing_pct)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(y = "missing %", x = "features") +
  coord_flip() +
  theme_minimal()


## Simple transformations
tr <- tr %>%
  mutate(date = ymd(date),
         hits = as.integer(hits),
         pageviews = as.integer(pageviews),
         bounces = as.integer(bounces),
         newVisits = as.integer(newVisits),
         transactionRevenue = as.numeric(transactionRevenue))
te <- te %>%
  mutate(date = ymd(date),
         hits = as.integer(hits),
         pageviews = as.integer(pageviews),
         bounces = as.integer(bounces),
         newVisits = as.integer(newVisits))


## Target variable
y <- tr$transactionRevenue
tr$transactionRevenue <- NULL
summary(y)
y[is.na(y)] <- 0
summary(y)

p1 <- as_tibble(y) %>%
  ggplot(aes(x = log1p(value))) +
  geom_histogram(bins = 30, fill = "steelblue") +
  labs(x = "transaction revenue") +
  theme_minimal()
p2 <- as_tibble(y[y>0]) %>%
  ggplot(aes(x = value)) +
  geom_histogram(bins = 30, fill = "steelblue") +
  labs(x = "non-zero transaction revenue") +
  theme_minimal()
multiplot(p1, p2, cols = 2)
as_tibble(log1p(y[y>0] / 1e6)) %>%
  ggplot(aes(x = value)) +
  geom_histogram(bins = 30, fill = "steelblue") +
  labs(x = "log(non-zero transaction revenue / 1e6)") +
  theme_minimal()

tr %>%
  bind_cols(as_tibble(y)) %>%
  ggplot(aes(x = 1:length(value), y = value)) +
  geom_point(colour = "steelblue", alpha = 0.4, size = 0.8) +
  theme_minimal() +
  scale_y_continuous(name = "revenue", labels = comma) +
  scale_x_continuous(name = "index", labels = comma) +
  theme(legend.position = "none")

tr %>%
  bind_cols(as_tibble(y)) %>%
  group_by(channelGrouping) %>%
  summarise(revenue = sum(value)) %>%
  ggplot(aes(x = channelGrouping, y = revenue)) +
  geom_point(colour = "steelblue", size = 2) +
  theme_minimal() +
  scale_y_continuous(labels = comma) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

tr %>%
  bind_cols(as_tibble(y)) %>%
  group_by(visitNumber) %>%
  summarise(revenue = sum(value)) %>%
  ggplot(aes(x = visitNumber, y = revenue)) +
  geom_point(colour = "steelblue", size = 0.5) +
  theme_minimal() +
  scale_x_continuous(breaks = c(1,3,5,10,15,25,50,100), limits = c(0,105)) +
  scale_y_continuous(labels = comma)


## How target variable changes in time
p1 <- tr %>%
  bind_cols(as_tibble(y)) %>%
  group_by(date) %>%
  summarise(visits = n()) %>%
  ungroup() %>%
  ggplot(aes(x = date, y = visits)) +
  geom_line() +
  geom_smooth() +
  labs(x = "") +
  theme_minimal()
p2 <- tr %>%
  bind_cols(as_tibble(y)) %>%
  group_by(date) %>%
  summarise(revenue = mean(value)) %>%
  ungroup() %>%
  ggplot(aes(x = date, y = revenue)) +
  geom_line() +
  stat_smooth() +
  labs(x = "") +
  theme_minimal() +
  scale_y_continuous(labels = comma)
multiplot(p1, p2, cols = 1)

tr %>%
  bind_cols(as_tibble(y)) %>%
  group_by(date, isTrueDirect) %>%
  summarise(revenue = mean(value)) %>%
  ungroup() %>%
  ggplot(aes(x = date, y = revenue, colour = isTrueDirect)) +
  stat_smooth(aes(colour = isTrueDirect)) +
  labs(x = "") +
  theme_minimal() +
  scale_y_continuous(labels = comma)


## Revenue forecasting using zoo and forecast
tr %>%
  bind_cols(tibble(revenue = y)) %>%
  group_by(date) %>%
  summarise(mean_revenue = log1p(mean(revenue/1e6))) %>%
  ungroup() %>%
  with(zoo(mean_revenue, order.by = date)) ->
  revenue

h <- max(te$date) - min(te$date) + 1

revenue %>%
  autoplot() +
  geom_line() +
  geom_smooth() +
  labs(x = "", y = "log(revenue") +
  theme_minimal()

m_aa <- auto.arima(revenue)
summary(m_aa)

forecast(m_aa, h = h) %>%
  autoplot() +
  theme_minimal()

tr %>%
  group_by(date) %>%
  summarize(mean_pv = log1p(mean(pageviews, na.rm = TRUE))) %>%
  ungroup() %$%
  mean_pv ->
  mean_pv_tr
te %>%
  group_by(date) %>%
  summarize(mean_pv = log1p(mean(pageviews, na.rm = TRUE))) %>%
  ungroup() %$%
  mean_pv ->
  mean_pv_te

m_aa_reg <- auto.arima(revenue, xreg = mean_pv_tr)
summary(m_aa_reg)

forecast(m_aa_reg, h = h, xreg = mean_pv_te) %>%
  autoplot() +
  theme_minimal()


## Time features
tr_vst <- as_datetime(tr$visitStartTime)
te_vst <- as_datetime(te$visitStartTime)
symdiff <- function(x, y) setdiff(union(x, y), intersect(x, y))

symdiff(tr_vst %>% year %>% unique, te_vst %>% year %>% unique)
symdiff(tr_vst %>% month %>% unique, te_vst %>% month %>% unique)
symdiff(tr_vst %>% day %>% unique, te_vst %>% day %>% unique)
symdiff(tr_vst %>% week %>% unique, te_vst %>% week %>% unique)
symdiff(tr_vst %>% yday %>% unique, te_vst %>% yday %>% unique)
symdiff(tr_vst %>% hour %>% unique, te_vst %>% hour %>% unique)


## Distribution of visits and revenue by attributes
tr %>%
  bind_cols(as_tibble(y)) %>%
  group_by(channelGrouping) %>%
  summarize(visits = n(), 
            mean_revenue = mean(value), 
            total_revenue = sum(value)) %>%
  ungroup() %>%
  mutate(channelGrouping = reorder(channelGrouping, -visits)) %>% 
  data.table::melt(id.vars = c("channelGrouping")) %>%
  ggplot(aes(channelGrouping, value, fill = variable)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~ variable, scales = 'free') +
  theme_minimal() +
  labs(x = "channel grouping", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")

tr %>%
  bind_cols(as_tibble(y)) %>%
  mutate(browser = factor(browser) %>% fct_lump(prop = 0.01)) %>%
  group_by(browser) %>%
  summarize(visits = n(), 
            mean_revenue = mean(value), 
            total_revenue = sum(value)) %>%
  ungroup() %>%
  mutate(browser = reorder(browser, -visits)) %>% 
  data.table::melt(id.vars = c("browser")) %>%
  ggplot(aes(browser, value, fill = variable)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~ variable, scales = 'free') +
  theme_minimal() +
  labs(x = "browser", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")

tr %>%
  bind_cols(as_tibble(y)) %>%
  mutate(operatingSystem = factor(operatingSystem) %>% fct_lump(prop = 0.01)) %>%
  group_by(operatingSystem) %>%
  summarize(visits = n(), 
            mean_revenue = mean(value), 
            total_revenue = sum(value)) %>%
  ungroup() %>%
  mutate(operatingSystem = reorder(operatingSystem, -visits)) %>% 
  data.table::melt(id.vars = c("operatingSystem")) %>%
  ggplot(aes(operatingSystem, value, fill = variable)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~ variable, scales = 'free') +
  theme_minimal() +
  labs(x = "operatingSystem", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")

tr %>%
  bind_cols(as_tibble(y)) %>%
  mutate(deviceCategory = factor(deviceCategory) %>% fct_lump(prop = 0.01)) %>%
  group_by(deviceCategory) %>%
  summarize(visits = n(), 
            mean_revenue = mean(value), 
            total_revenue = sum(value)) %>%
  ungroup() %>%
  mutate(deviceCategory = reorder(deviceCategory, -visits)) %>% 
  data.table::melt(id.vars = c("deviceCategory")) %>%
  ggplot(aes(deviceCategory, value, fill = variable)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~ variable, scales = 'free') +
  theme_minimal() +
  labs(x = "deviceCategory", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")

tr %>%
  bind_cols(as_tibble(y)) %>%
  mutate(country = factor(country) %>% fct_lump(prop = 0.023)) %>%
  group_by(country) %>%
  summarize(visits = n(), 
            mean_revenue = mean(value), 
            total_revenue = sum(value)) %>%
  ungroup() %>%
  mutate(country = reorder(country, -visits)) %>% 
  data.table::melt(id.vars = c("country")) %>%
  ggplot(aes(country, value, fill = variable)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~ variable, scales = 'free') +
  theme_minimal() +
  labs(x = "country", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")

tr %>%
  bind_cols(as_tibble(y)) %>%
  mutate(city = factor(city) %>% fct_lump(prop = 0.01)) %>%
  group_by(city) %>%
  summarize(visits = n(), 
            mean_revenue = mean(value), 
            total_revenue = sum(value)) %>%
  ungroup() %>%
  mutate(city = reorder(city, -visits)) %>% 
  data.table::melt(id.vars = c("city")) %>%
  ggplot(aes(city, value, fill = variable)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~ variable, scales = 'free') +
  theme_minimal() +
  labs(x = "city", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")

tr %>%
  bind_cols(as_tibble(y)) %>%
  mutate(networkDomain = factor(networkDomain) %>% fct_lump(prop = 0.01)) %>%
  group_by(networkDomain) %>%
  summarize(visits = n(), 
            mean_revenue = mean(value), 
            total_revenue = sum(value)) %>%
  ungroup() %>%
  mutate(networkDomain = reorder(networkDomain, -visits)) %>% 
  data.table::melt(id.vars = c("networkDomain")) %>%
  ggplot(aes(networkDomain, value, fill = variable)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~ variable, scales = 'free') +
  theme_minimal() +
  labs(x = "networkDomain", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")

tr %>%
  bind_cols(as_tibble(y)) %>%
  mutate(medium = factor(medium) %>% fct_lump(prop = 0.01)) %>%
  group_by(medium) %>%
  summarize(visits = n(), 
            mean_revenue = mean(value), 
            total_revenue = sum(value)) %>%
  ungroup() %>%
  mutate(medium = reorder(medium, -visits)) %>% 
  data.table::melt(id.vars = c("medium")) %>%
  ggplot(aes(medium, value, fill = variable)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~ variable, scales = 'free') +
  theme_minimal() +
  labs(x = "medium", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")

# Bot or not?
bot_browsers <- c("Mozilla Compatible Agent", "Seznam", "User Agent",
                  "Changa 99695759", "ThumbSniper", "LYF_LS_4002_12",
                  "[User default User-agent string] LIVRENPOCHE",
                  "no-ua", "YE", "0", "subjectAgent: NoticiasBoom")
tr %>%
  bind_cols(tibble(revenue = y)) %>%
  filter(revenue == 0 & browser %in% bot_browsers) %>%
  group_by(browser) %>%
  summarise(visits = n()) %>%
  ungroup() %>%
  ggplot(aes(reorder(browser, -visits), visits)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme_minimal() +
  labs(x = "browser", y = "visits") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1),
        legend.position = "none") +
  geom_text(aes(label = visits), vjust = -0.2, colour = "black", size = 2.5)

tr %>%
  bind_cols(tibble(revenue = y)) %>%
  filter(revenue == 0) %>%
  filter(browser == "Mozilla Compatible Agent") %>%
  group_by(date) %>%
  summarise(visits = n()) %>%
  ungroup() %>%
  ggplot(aes(x = date, y = visits)) +
  geom_line() +
  geom_smooth() +
  labs(x = "") +
  theme_minimal()

tr %>%
  bind_cols(tibble(revenue = y)) %>%
  filter(revenue == 0) %>%
  filter(browser == "Mozilla Compatible Agent") %>%
  group_by(date) %>%
  summarise(visits = n()) %>%
  ungroup() %>%
  arrange(-visits) %>%
  top_n(10)

tr %>%
  bind_cols(tibble(revenue = y)) %>%
  filter(revenue == 0) %>%
  filter(browser == "Mozilla Compatible Agent") %>%
  select(date, networkDomain, country) %>%
  mutate(networkDomain = str_split(networkDomain, "\\.") %>% map(~ .x[[length(.x)]]) %>% unlist) %>%
  group_by_all() %>%
  summarise(visits = n()) %>%
  ungroup() %>%
  arrange(-visits) %>%
  na.omit() %>%
  top_n(10)

p1 <- tr %>%
  bind_cols(tibble(revenue = y)) %>%
  filter(revenue == 0) %>%
  filter(browser == "Mozilla Compatible Agent") %>%
  group_by(country) %>%
  summarise(visits = n()) %>%
  ungroup() %>%
  arrange(-visits) %>%
  na.omit() %>%
  top_n(10) %>%
  ggplot(aes(reorder(country, -visits), visits)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme_minimal() +
  labs(x = "country", y = "visits") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1),
        legend.position = "none") +
  geom_text(aes(label = visits), vjust = -0.2, colour = "black", size = 2.5)

p2 <- tr %>%
  bind_cols(tibble(revenue = y)) %>%
  filter(revenue == 0) %>%
  filter(browser == "Mozilla Compatible Agent") %>%
  mutate(networkDomain = str_split(networkDomain, "\\.") %>% map(~ .x[[length(.x)]]) %>% unlist) %>%
  group_by(networkDomain) %>%
  summarise(visits = n()) %>%
  ungroup() %>%
  arrange(-visits) %>%
  na.omit() %>%
  top_n(10) %>%
  ggplot(aes(reorder(networkDomain, -visits), visits)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme_minimal() +
  labs(x = "networkDomain", y = "visits") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1),
        legend.position = "none") +
  geom_text(aes(label = visits), vjust = -0.2, colour = "black", size = 2.5)

multiplot(p1, p2, cols = 2)

# Correlation between revenue and features
m <- tr %>%
  mutate(year = year(date),
         month = month(date),
         day = day(date),
         isMobile = ifelse(isMobile, 1L, 0L),
         isTrueDirect = ifelse(isMobile, 1L, 0L)) %>%
  mutate_all(funs(ifelse(is.na(.), 0, .))) %>%
  select(-date, -fullVisitorId, -visitId, -sessionId) %>%
  mutate_if(is.character, factor) %>%
  mutate_if(is.factor, fct_lump, prop = 0.01) %>%
  model.matrix(~ . - 1, .) %>%
  cor(y) %>%
  data.table::as.data.table(keep.rownames = TRUE) %>%
  set_names("Feature", "rho") %>%
  arrange(-rho)

m %>%
  ggplot(aes(x = rho)) +
  geom_histogram(bins = 50, fill = "steelblue") +
  labs(x = "correlation") +
  theme_minimal()

m %>%
  filter(rho > 0.1) %>%
  kable()

p1 <- tr %>%
  select(pageviews) %>%
  bind_cols(as_tibble(y)) %>%
  filter(value > 0) %>%
  ggplot(aes(x = pageviews, y = log1p(value))) +
  geom_point() +
  labs(x = "pageviews", y = "transaction revenue") +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal()

p2 <- tr %>%
  select(hits) %>%
  bind_cols(as_tibble(y)) %>%
  filter(value > 0) %>%
  ggplot(aes(x = hits, y = log1p(value))) +
  geom_point() +
  labs(x = "hits", y = "transaction revenue") +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal()

multiplot(p1, p2, cols = 2)

## Linear Mixed Model
te <- te %>%
  mutate(channelGrouping = as.character(channelGrouping),
         fullVisitorId = as.character(fullVisitorId),
         sessionId = as.character(sessionId))
tri <- 1:nrow(tr)
data <- tr %>%
  bind_cols(tibble(revenue = y)) %>%
  bind_rows(te) %>%
  select(revenue, pageviews, hits, visitNumber, fullVisitorId) %>%
  mutate_each(funs(as.numeric(.) %>% log1p), -fullVisitorId) %>%
  mutate(pageviews = ifelse(is.na(pageviews), 0, pageviews))

m_lmm0 <- glmer(revenue ~ (1|fullVisitorId), data = data[tri, ])
bg_var <- summary(m_lmm0)$varcor$fullVisitorId[1]
resid_var <- attr(summary(m_lmm0)$varcor, "sc")^2
summary(m_lmm0)

m_lmm1 <- update(m_lmm0, revenue ~ pageviews + (1|fullVisitorId))
m_lmm2 <- update(m_lmm0, revenue ~ pageviews + hits + (1|fullVisitorId))
m_lmm3 <- update(m_lmm0, revenue ~ pageviews + hits + visitNumber + (1|fullVisitorId))

anova(m_lmm0, m_lmm1, m_lmm2, m_lmm3)

pred_lmm <- predict(m_lmm3)

## Basic models
grp_mean <- function(x, grp) ave(x, grp, FUN = function(x) mean(x, na.rm = TRUE))

idx <- tr$date < ymd("20170701")
id <- te[, "fullVisitorId"]
tri <- 1:nrow(tr)

tr_te <- tr %>%
  bind_rows(te) %>%
  mutate(year = year(date) %>% factor(),
         wday = wday(date) %>% factor(),
         hour = hour(as_datetime(visitStartTime)) %>% factor(),
         isMobile = ifelse(isMobile, 1L, 0L),
         isTrueDirect = ifelse(isTrueDirect, 1L, 0L),
         adwordsClickInfo.isVideoAd = ifelse(!adwordsClickInfo.isVideoAd, 0L, 1L)) %>%
  select(-date, -fullVisitorId, -visitId, -sessionId, -hits, -visitStartTime) %>%
  mutate_if(is.character, factor) %>%
  mutate(pageviews_mean_vn = grp_mean(pageviews, visitNumber),
         pageviews_mean_country = grp_mean(pageviews, country),
         pageviews_mean_city = grp_mean(pageviews, city),
         pageviews_mean_dom = grp_mean(pageviews, networkDomain),
         pageviews_mean_ref = grp_mean(pageviews, referralPath)) %T>%
  glimpse()

submit <- . %>%
  as_tibble() %>%
  set_names("y") %>%
  mutate(y = ifelse(y < 0, 0, exmp1(y))) %>%
  bind_cols(id) %>%
  group_by(fullVisitorId) %>%
  summarise(y = log1p(sum(y))) %>%
  right_join(
    read_csv("sample_submission.csv"),
    by = "fullVisitorId") %>%
  mutate(PredictedLogRevenue = round(y, 5)) %>%
  select(-y) %>%
  write_csv(sub)

## GLMNET
tr_te_ohe <- tr_te %>%
  mutate_if(is.factor, fct_explicit_na) %>%
  mutate_if(is.numeric, funs(ifelse(is.na(.), 0L, .))) %>%
  mutate_if(is.factor, fct_lump, prop = 0.05) %>%
  select(-adwordsClickInfo.isVideoAd) %>%
  model.matrix(~.-1, .) %>%
  scale() %>%
  round(4)

X <- tr_te_ohe[tri, ]
X_test <- tr_te_ohe[-tri, ]

m_glm <- cv.glmnet(X, log1p(y), alpha = 0, family = "gaussian",
                   type.measure = "mse", nfolds = 5)

pred_glm_tr <- predict(m_glm, X, s = "lambda.min") %>% c()
pred_glm <- predict(m_glm, X_test, s = "lambda.min") %>% c()
